"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PayPalButton = void 0;

require("@babel/polyfill");

var _react = _interopRequireDefault(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var PayPalButton =
/*#__PURE__*/
function (_React$Component) {
  _inherits(PayPalButton, _React$Component);

  function PayPalButton(props) {
    var _this;

    _classCallCheck(this, PayPalButton);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(PayPalButton).call(this, props));
    _this.state = {
      isSdkReady: false
    };
    return _this;
  }

  _createClass(PayPalButton, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      if (window !== undefined && window.paypal === undefined) {
        this.addPaypalSdk();
      } else if (window !== undefined && window.paypal !== undefined && this.props.onButtonReady) {
        this.props.onButtonReady();
      }
    }
  }, {
    key: "createOrder",
    value: function createOrder(data, actions) {
      return actions.order.create({
        purchase_units: [{
          amount: {
            currency_code: this.props.currency ? this.props.currency : this.props.options && this.props.options.currency ? this.props.options.currency : "USD",
            value: this.props.amount.toString()
          }
        }]
      });
    }
  }, {
    key: "onApprove",
    value: function onApprove(data, actions) {
      var _this2 = this;

      return actions.order.capture().then(function (details) {
        if (_this2.props.onSuccess) {
          return _this2.props.onSuccess(details, data);
        }
      }).catch(function (err) {
        if (_this2.props.catchError) {
          return _this2.props.catchError(err);
        }
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;

      var _this$props = this.props,
          amount = _this$props.amount,
          onSuccess = _this$props.onSuccess,
          createOrder = _this$props.createOrder,
          onApprove = _this$props.onApprove,
          style = _this$props.style;
      var isSdkReady = this.state.isSdkReady;

      if (!isSdkReady && window.paypal === undefined) {
        return null;
      }

      var Button = window.paypal.Buttons.driver("react", {
        React: _react.default,
        ReactDOM: _reactDom.default
      });
      return _react.default.createElement(Button, _extends({}, this.props, {
        createOrder: amount && !createOrder ? function (data, actions) {
          return _this3.createOrder(data, actions);
        } : function (data, actions) {
          return createOrder(data, actions);
        },
        onApprove: onSuccess ? function (data, actions) {
          return _this3.onApprove(data, actions);
        } : function (data, actions) {
          return onApprove(data, actions);
        },
        style: style
      }));
    }
  }, {
    key: "addPaypalSdk",
    value: function addPaypalSdk() {
      var _this4 = this;

      var _this$props2 = this.props,
          options = _this$props2.options,
          onButtonReady = _this$props2.onButtonReady;
      var queryParams = []; // replacing camelCase with dashes

      Object.keys(options).forEach(function (k) {
        var name = k.split(/(?=[A-Z])/).join("-").toLowerCase();
        queryParams.push("".concat(name, "=").concat(options[k]));
      });
      var script = document.createElement("script");
      script.type = "text/javascript";
      script.src = "https://www.paypal.com/sdk/js?".concat(queryParams.join("&"));
      script.async = true;

      script.onload = function () {
        _this4.setState({
          isSdkReady: true
        });

        if (onButtonReady) {
          onButtonReady();
        }
      };

      script.onerror = function () {
        throw new Error("Paypal SDK could not be loaded.");
      };

      document.body.appendChild(script);
    }
  }]);

  return PayPalButton;
}(_react.default.Component);

exports.PayPalButton = PayPalButton;

_defineProperty(PayPalButton, "propTypes", {
  amount: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
  currency: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
  onSuccess: _propTypes.default.func,
  catchError: _propTypes.default.func,
  onError: _propTypes.default.func,
  createOrder: _propTypes.default.func,
  onApprove: _propTypes.default.func,
  style: _propTypes.default.object,
  options: _propTypes.default.shape({
    clientId: _propTypes.default.string,
    merchantId: _propTypes.default.string,
    currency: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
    intent: _propTypes.default.string,
    commit: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.string]),
    vault: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.string]),
    component: _propTypes.default.string,
    disableFunding: _propTypes.default.string,
    disableCard: _propTypes.default.string,
    integrationDate: _propTypes.default.string,
    locale: _propTypes.default.string,
    buyerCountry: _propTypes.default.string,
    debug: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.string])
  }),
  onButtonReady: _propTypes.default.func
});

_defineProperty(PayPalButton, "defaultProps", {
  style: {},
  options: {
    clientId: "sb",
    currency: "USD"
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,